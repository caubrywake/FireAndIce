function tableout = importfile_SR50(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE Import data from a spreadsheet
%   DATA = IMPORTFILE(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   table.
%
%   DATA = IMPORTFILE(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Non-numeric cells are replaced with: NaN
%
% Example:
%   SR50allyears15min = importfile('SR50_allyears_15min.xlsx','Sheet1',5,7589);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2021/05/03 10:45:41

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 5;
    endRow = 7589;
end

%% Import the data, extracting spreadsheet dates in Excel serial date format
[~, ~, raw, dates] = xlsread(workbookFile, sheetName, sprintf('A%d:L%d',startRow(1),endRow(1)),'' , @convertSpreadsheetExcelDates);
for block=2:length(startRow)
    [~, ~, tmpRawBlock,tmpDateNumBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:L%d',startRow(block),endRow(block)),'' , @convertSpreadsheetExcelDates);
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
    dates = [dates;tmpDateNumBlock]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
raw = raw(:,[2,4,6,8,10,12]);
dates = dates(:,[1,3,5,7,9,11]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),dates); % Find non-numeric cells
dates(R) = {NaN}; % Replace non-numeric Excel dates with NaN

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Create table
tableout = table;

%% Allocate imported array to column variable names
dates(~cellfun(@(x) isnumeric(x) || islogical(x), dates)) = {NaN};
tableout.TIMESTAMP = datetime([dates{:,1}].', 'ConvertFrom', 'Excel');
tableout.TempCorDistance = data(:,1);
tableout.TIMESTAMP1 = datetime([dates{:,2}].', 'ConvertFrom', 'Excel');
tableout.TempCorDistance1 = data(:,2);
tableout.TIMESTAMP2 = datetime([dates{:,3}].', 'ConvertFrom', 'Excel');
tableout.TempCorDistance2 = data(:,3);
tableout.TIMESTAMP3 = datetime([dates{:,4}].', 'ConvertFrom', 'Excel');
tableout.TempCorDistance3 = data(:,4);
tableout.TIMESTAMP4 = datetime([dates{:,5}].', 'ConvertFrom', 'Excel');
tableout.TempCorDistance4 = data(:,5);
tableout.TIMESTAMP5 = datetime([dates{:,6}].', 'ConvertFrom', 'Excel');
tableout.TempCorDistanceIce = data(:,6);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% tableout.TIMESTAMP=datenum(tableout.TIMESTAMP);
% tableout.TIMESTAMP1=datenum(tableout.TIMESTAMP1);
% tableout.TIMESTAMP2=datenum(tableout.TIMESTAMP2);
% tableout.TIMESTAMP3=datenum(tableout.TIMESTAMP3);
% tableout.TIMESTAMP4=datenum(tableout.TIMESTAMP4);
% tableout.TIMESTAMP5=datenum(tableout.TIMESTAMP5);

